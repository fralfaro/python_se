{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc68\u200d\ud83d\udcbb Bienvenido a Python Software Engineering","text":""},{"location":"#contenidos-del-curso","title":"\ud83d\udcda Contenidos del Curso","text":"<p>Fundamentos</p><p>Convenciones, paradigmas de programaci\u00f3n, funciones, clases y tipado est\u00e1tico.</p> <p>Dise\u00f1o de Software</p><p>Principios S.O.L.I.D., patrones de dise\u00f1o, refactorizaci\u00f3n y estructura de proyectos.</p> <p>Control de Versiones</p><p>Git, GitHub, gitignore y licencias para proyectos colaborativos.</p> <p>Entornos y Dependencias</p><p>Pyenv, Virtualenv, Poetry, uv y Makefile para entornos reproducibles.</p> <p>Calidad de C\u00f3digo</p><p>Ruff, linters, pre-commit, Black y Mypy para mantener c\u00f3digo limpio y estable.</p> <p>Testing</p><p>Pytest, Coverage, Mocking e Hypothesis para asegurar el comportamiento correcto del software.</p> <p>Documentaci\u00f3n</p><p>Aprende a documentar profesionalmente con MkDocs, Material y plugins \u00fatiles.</p> <p>Extras</p><p>Diagramas con PlantUML, herramientas visuales y notebooks interactivos.</p>"},{"location":"unit1/","title":"\ud83d\udcd8 Unidad 1: Fundamentos","text":"<p>En esta unidad abordamos los elementos esenciales del lenguaje Python que todo desarrollador profesional debe dominar.</p>"},{"location":"unit1/#contenidos","title":"Contenidos","text":"<ul> <li>Convenciones y buenas pr\u00e1cticas (PEP 8)</li> <li>Paradigmas de programaci\u00f3n (imperativo, funcional, orientado a objetos)</li> <li>Funciones y reutilizaci\u00f3n de c\u00f3digo</li> <li>Clases y objetos en Python</li> <li>Tipado est\u00e1tico y su importancia en proyectos profesionales</li> </ul>"},{"location":"unit1/#objetivos","title":"Objetivos","text":"<ul> <li>Comprender las bases del lenguaje y su filosof\u00eda.</li> <li>Aplicar estilos y convenciones reconocidas por la comunidad.</li> <li>Utilizar diferentes paradigmas seg\u00fan el contexto del problema.</li> </ul>"},{"location":"unit1/#recursos","title":"Recursos","text":"<ul> <li>pep.md</li> <li>paradigm.md</li> <li>function.md</li> <li>classes.md</li> <li>typing.md</li> </ul>"},{"location":"unit2/","title":"\ud83e\udde0 Unidad 2: Dise\u00f1o de Software","text":"<p>Exploramos principios y herramientas que permiten construir software limpio, extensible y f\u00e1cil de mantener.</p>"},{"location":"unit2/#contenidos","title":"Contenidos","text":"<ul> <li>Principios SOLID</li> <li>Patrones de dise\u00f1o cl\u00e1sicos</li> <li>Refactorizaci\u00f3n de c\u00f3digo heredado</li> <li>Estructura de proyectos en Python</li> </ul>"},{"location":"unit2/#objetivos","title":"Objetivos","text":"<ul> <li>Dise\u00f1ar software siguiendo principios robustos.</li> <li>Aplicar patrones de dise\u00f1o seg\u00fan las necesidades del sistema.</li> <li>Reorganizar c\u00f3digo para mejorar su claridad y mantenibilidad.</li> </ul>"},{"location":"unit2/#recursos","title":"Recursos","text":"<ul> <li>solid.md</li> <li>design_pattern.md</li> <li>refactoring.md</li> <li>structure.md</li> </ul>"},{"location":"unit3/","title":"\ud83c\udf3f Unidad 3: Control de Versiones","text":"<p>Aprende a trabajar colaborativamente y a gestionar el historial de tu c\u00f3digo con Git y GitHub.</p>"},{"location":"unit3/#contenidos","title":"Contenidos","text":"<ul> <li>Git: flujo de trabajo, ramas y commits</li> <li>Gitignore y limpieza del repositorio</li> <li>GitHub: colaboraci\u00f3n y gesti\u00f3n de repositorios</li> <li>Licencias de software</li> </ul>"},{"location":"unit3/#objetivos","title":"Objetivos","text":"<ul> <li>Usar Git de forma profesional.</li> <li>Configurar repositorios limpios y colaborativos.</li> <li>Entender el impacto legal de las licencias.</li> </ul>"},{"location":"unit3/#recursos","title":"Recursos","text":"<ul> <li>git.md</li> <li>gitignore.md</li> <li>github.md</li> <li>licensing.md</li> </ul>"},{"location":"unit4/","title":"\u2699\ufe0f Unidad 4: Entornos y Dependencias","text":"<p>Configuramos entornos de desarrollo reproducibles y aislados usando herramientas modernas.</p>"},{"location":"unit4/#contenidos","title":"Contenidos","text":"<ul> <li>Pyenv y Virtualenv</li> <li>Poetry: gesti\u00f3n de dependencias y publicaci\u00f3n</li> <li>uv: gestor r\u00e1pido de entornos</li> <li>Makefile: automatizaci\u00f3n de tareas comunes</li> </ul>"},{"location":"unit4/#objetivos","title":"Objetivos","text":"<ul> <li>Crear entornos aislados por proyecto.</li> <li>Gestionar dependencias de forma controlada.</li> <li>Automatizar flujos de trabajo con Makefile.</li> </ul>"},{"location":"unit4/#recursos","title":"Recursos","text":"<ul> <li>pyenv.md</li> <li>virtualenv.md</li> <li>poetry.md</li> <li>uv.md</li> <li>makefile.md</li> </ul>"},{"location":"unit5/","title":"\u2705 Unidad 5: Calidad de C\u00f3digo","text":"<p>Descubre c\u00f3mo mantener tu c\u00f3digo limpio, legible y libre de errores comunes.</p>"},{"location":"unit5/#contenidos","title":"Contenidos","text":"<ul> <li>Ruff: linter y formateador moderno</li> <li>Black: formateo autom\u00e1tico</li> <li>Mypy: an\u00e1lisis de tipado est\u00e1tico</li> <li>Pre-commit hooks</li> <li>Linters tradicionales (flake8, isort)</li> </ul>"},{"location":"unit5/#objetivos","title":"Objetivos","text":"<ul> <li>Automatizar el chequeo de estilo y errores.</li> <li>Mejorar la legibilidad del c\u00f3digo.</li> <li>Integrar validaciones en el flujo de desarrollo.</li> </ul>"},{"location":"unit5/#recursos","title":"Recursos","text":"<ul> <li>ruff.md</li> <li>black.md</li> <li>mypy.md</li> <li>others.md</li> <li>precommit.md</li> </ul>"},{"location":"unit6/","title":"\ud83e\uddea Unidad 6: Testing","text":"<p>Construimos software confiable mediante pruebas unitarias, de integraci\u00f3n y basadas en propiedades.</p>"},{"location":"unit6/#contenidos","title":"Contenidos","text":"<ul> <li>Introducci\u00f3n al testing</li> <li>Pytest: framework principal</li> <li>Coverage: cobertura de c\u00f3digo</li> <li>Mocking: simulaci\u00f3n de dependencias</li> <li>Hypothesis: testing basado en propiedades</li> </ul>"},{"location":"unit6/#objetivos","title":"Objetivos","text":"<ul> <li>Escribir pruebas automatizadas.</li> <li>Detectar errores antes de desplegar.</li> <li>Medir y mejorar la cobertura de tests.</li> </ul>"},{"location":"unit6/#recursos","title":"Recursos","text":"<ul> <li>intro.md</li> <li>pytest.md</li> <li>coverage.md</li> <li>mocking.md</li> <li>hypothesis.md</li> </ul>"},{"location":"unit7/","title":"\ud83d\udcd8 Unidad 7: Documentaci\u00f3n","text":"<p>Aprende a documentar tu c\u00f3digo y proyectos de forma clara y profesional.</p>"},{"location":"unit7/#contenidos","title":"Contenidos","text":"<ul> <li>Introducci\u00f3n a la documentaci\u00f3n t\u00e9cnica</li> <li>MkDocs: documentaci\u00f3n est\u00e1tica</li> <li>Tema Material para MkDocs</li> <li>Plugins \u00fatiles para mejorar la experiencia</li> </ul>"},{"location":"unit7/#objetivos","title":"Objetivos","text":"<ul> <li>Crear documentaci\u00f3n navegable.</li> <li>Automatizar la generaci\u00f3n de documentaci\u00f3n.</li> <li>Publicar sitios con documentaci\u00f3n t\u00e9cnica.</li> </ul>"},{"location":"unit7/#recursos","title":"Recursos","text":"<ul> <li>intro.md</li> <li>mkdocs.md</li> <li>mkdocs-material.md</li> <li>mkdocs-plugging.md</li> </ul>"},{"location":"unit8/","title":"\ud83c\udf81 Unidad 8: Extras","text":"<p>Recursos complementarios que enriquecen el proceso de desarrollo profesional.</p>"},{"location":"unit8/#contenidos","title":"Contenidos","text":"<ul> <li>Diagramas UML con PlantUML</li> <li>Visualizaci\u00f3n con <code>diagrams</code></li> <li>Notebooks interactivos para documentaci\u00f3n</li> </ul>"},{"location":"unit8/#objetivos","title":"Objetivos","text":"<ul> <li>Representar gr\u00e1ficamente la arquitectura del software.</li> <li>Explorar herramientas visuales en Python.</li> <li>Integrar notebooks en flujos t\u00e9cnicos.</li> </ul>"},{"location":"unit8/#recursos","title":"Recursos","text":"<ul> <li>plantuml.ipynb</li> <li>diagrams.ipynb</li> </ul>"}]}